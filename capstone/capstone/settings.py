"""
The Django settings for the Capstone project.

This file was generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see:
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/5.0/ref/settings/

Ensure a review of the project settings before deploying to production. For more information and a checklist, please see: https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# The build path inside the project, e.g., BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: Keep the secret key used in production secret. (Hint: Use environment variable secrets)

SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: Don't run with debug turned on inside production mode!

DEBUG = True

# A specificity of which host/domain names are allowed to access the Django application.

ALLOWED_HOSTS = []

# A list of Python packages and Django applications that are used and should be loaded upon startup of the project.

INSTALLED_APPS = [
    "apps.authentication",
    "apps.event",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# A series of middleware components that Django will use to process requests and responses in your web application.

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# A string that specifies the Python module where Django should look for URL patterns ('urlpatterns') when processing incoming Hypertext Transfer Protocol (HTTP) requests.

ROOT_URLCONF = "capstone.urls"

# This configures how Django processes templates to generate HTML responses.

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# The reference to the custom user model for authentication and authorization within the project.

AUTH_USER_MODEL = "authentication.User"

# The entry point for the WSGI application used to serve the Django project.

WSGI_APPLICATION = "capstone.wsgi.application"


# The database connections the application will interact with to store and retrieve data. For more information, please see: https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Validators used to enforce password strength and security for user authentication. For more details, reference: https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization and localization setting configurations that allow the application to support a global user base with multiple languages and localized data formats. For more details, see: https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-US"

TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_TZ = True

# ------------------------------------------------------------------------------
# Static Files (CSS, Fonts, Images, Scripts, etc.) Please refer to the following link for more information: https://docs.djangoproject.com/en/5.0/howto/static-files/

# Specifies the filesystem path where static files are collected for deployment. This occurs when the 'collectstatic' management command is executed.

STATIC_ROOT = os.path.join(BASE_DIR, "static_files")

# The URL prefix for serving static files.

STATIC_URL = "/static/"

# Additional locations to collect static files from after executing the ``collectstatic`` management command.

STATICFILES_DIRS = [
    # This item also includes the project-level static directory.
    os.path.join(BASE_DIR, "static"),
]

# ------------------------------------------------------------------------------

# The filesystem path where user-uploaded media files are stored.

MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# This directory specifies the URL path prefix for serving user-uploaded media files.

MEDIA_URL = "/media/"

# The default field type to use for auto-created primary keys on models that donâ€™t explicitly define a primary key. See the documentation for more details: https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
